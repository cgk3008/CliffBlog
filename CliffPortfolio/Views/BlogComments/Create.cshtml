@*@model CliffPortfolio.Models.BlogComment*@
@model IEnumerable<CliffPortfolio.Models.BlogComment>

@{
	ViewBag.Title = "Create Comment";
}

<h2>Create</h2>
<html lang="en">
<body>
	@foreach (var item in Model)
	{
		<tr>
			<td>
				@Html.DisplayFor(modelItem => item.Author.FirstName)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Post.Title)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Body)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Created)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Updated)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.UpdateReason)
			</td>

			@if (User.IsInRole("Admin") || User.IsInRole("Moderator"))
			{
				<td>
					@Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
					@Html.ActionLink("Details", "Details", new { id = item.Id }) |
					@Html.ActionLink("Delete", "Delete", new { id = item.Id })
				</td>
			}
		</tr>
	}

<<<<<<< HEAD
</body>

</html>
=======
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>BlogComment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.PostId, "PostId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PostId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PostId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AuthorId, "AuthorId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("AuthorId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AuthorId, "", new { @class = "text-danger" })
            </div>
        </div>
>>>>>>> parent of 7146ad2... added disable feature to comment post button if user not logged in.  Need to add instruction to register/login if want to comment. Then add code to remove that instruction if logged in/authenticated.

@*@using (Html.BeginForm())
	{
		@Html.AntiForgeryToken()

<<<<<<< HEAD
		<div class="form-horizontal">
			<h4>BlogComment</h4>
			<hr />
			@Html.ValidationSummary(true, "", new { @class = "text-danger" })
			<div class="form-group">
				@Html.LabelFor(model => model.PostId, "Post Id", htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.DropDownList("PostId", null, htmlAttributes: new { @class = "form-control" })
					@Html.ValidationMessageFor(model => model.PostId, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.AuthorId, "Author", htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.DropDownList("AuthorId", null, htmlAttributes: new { @class = "form-control" })
					@Html.ValidationMessageFor(model => model.AuthorId, "", new { @class = "text-danger" })
				</div>
			</div>
=======
        <div class="form-group">
            @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Created, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Created, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Updated, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Updated, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Updated, "", new { @class = "text-danger" })
            </div>
        </div>
>>>>>>> parent of 7146ad2... added disable feature to comment post button if user not logged in.  Need to add instruction to register/login if want to comment. Then add code to remove that instruction if logged in/authenticated.

			<div class="form-group">
				@Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
					@Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@Html.EditorFor(model => model.Created, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.Created, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.Updated, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@Html.EditorFor(model => model.Updated, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.Updated, "", new { @class = "text-danger" })
					</div>
				</div>

			<div class="form-group">
				@Html.LabelFor(model => model.UpdateReason, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.UpdateReason, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.UpdateReason, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
				<div class="col-md-offset-2 col-md-10">
					<input type="submit" value="Create" class="btn btn-default" />
				</div>
			</div>
		</div>
	}*@

<div>
	@Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
}
